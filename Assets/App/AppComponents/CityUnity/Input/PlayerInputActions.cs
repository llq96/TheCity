//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/App/AppComponents/CityUnity/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Time"",
            ""id"": ""82fe529f-134c-4b0b-9b3b-7aa1757804b3"",
            ""actions"": [
                {
                    ""name"": ""Time_Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0fcf315e-1ffe-42b2-a50e-de44b36b22ec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Time_Play"",
                    ""type"": ""Button"",
                    ""id"": ""3edd5294-bf13-4ba5-a7ee-2e44647a8139"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Time_FastPlay"",
                    ""type"": ""Button"",
                    ""id"": ""fb3533a1-2eee-471f-b492-85785517e545"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Time_VeryFastPlay"",
                    ""type"": ""Button"",
                    ""id"": ""8bf68eba-6a75-4471-b7b6-9337e18c23c3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf793947-b7dd-4109-a112-88ddbd1b906f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time_Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0a1f07e-caec-4bf8-b272-cdc3506eb067"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time_Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9cae1dc-5de1-43f6-b596-60c248511d3e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time_FastPlay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa096387-2423-4e6e-9f81-2a3a8236b3e6"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time_VeryFastPlay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Time
        m_Time = asset.FindActionMap("Time", throwIfNotFound: true);
        m_Time_Time_Pause = m_Time.FindAction("Time_Pause", throwIfNotFound: true);
        m_Time_Time_Play = m_Time.FindAction("Time_Play", throwIfNotFound: true);
        m_Time_Time_FastPlay = m_Time.FindAction("Time_FastPlay", throwIfNotFound: true);
        m_Time_Time_VeryFastPlay = m_Time.FindAction("Time_VeryFastPlay", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Time.enabled, "This will cause a leak and performance issues, PlayerInputActions.Time.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Time
    private readonly InputActionMap m_Time;
    private List<ITimeActions> m_TimeActionsCallbackInterfaces = new List<ITimeActions>();
    private readonly InputAction m_Time_Time_Pause;
    private readonly InputAction m_Time_Time_Play;
    private readonly InputAction m_Time_Time_FastPlay;
    private readonly InputAction m_Time_Time_VeryFastPlay;
    public struct TimeActions
    {
        private @PlayerInputActions m_Wrapper;
        public TimeActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Time_Pause => m_Wrapper.m_Time_Time_Pause;
        public InputAction @Time_Play => m_Wrapper.m_Time_Time_Play;
        public InputAction @Time_FastPlay => m_Wrapper.m_Time_Time_FastPlay;
        public InputAction @Time_VeryFastPlay => m_Wrapper.m_Time_Time_VeryFastPlay;
        public InputActionMap Get() { return m_Wrapper.m_Time; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TimeActions set) { return set.Get(); }
        public void AddCallbacks(ITimeActions instance)
        {
            if (instance == null || m_Wrapper.m_TimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TimeActionsCallbackInterfaces.Add(instance);
            @Time_Pause.started += instance.OnTime_Pause;
            @Time_Pause.performed += instance.OnTime_Pause;
            @Time_Pause.canceled += instance.OnTime_Pause;
            @Time_Play.started += instance.OnTime_Play;
            @Time_Play.performed += instance.OnTime_Play;
            @Time_Play.canceled += instance.OnTime_Play;
            @Time_FastPlay.started += instance.OnTime_FastPlay;
            @Time_FastPlay.performed += instance.OnTime_FastPlay;
            @Time_FastPlay.canceled += instance.OnTime_FastPlay;
            @Time_VeryFastPlay.started += instance.OnTime_VeryFastPlay;
            @Time_VeryFastPlay.performed += instance.OnTime_VeryFastPlay;
            @Time_VeryFastPlay.canceled += instance.OnTime_VeryFastPlay;
        }

        private void UnregisterCallbacks(ITimeActions instance)
        {
            @Time_Pause.started -= instance.OnTime_Pause;
            @Time_Pause.performed -= instance.OnTime_Pause;
            @Time_Pause.canceled -= instance.OnTime_Pause;
            @Time_Play.started -= instance.OnTime_Play;
            @Time_Play.performed -= instance.OnTime_Play;
            @Time_Play.canceled -= instance.OnTime_Play;
            @Time_FastPlay.started -= instance.OnTime_FastPlay;
            @Time_FastPlay.performed -= instance.OnTime_FastPlay;
            @Time_FastPlay.canceled -= instance.OnTime_FastPlay;
            @Time_VeryFastPlay.started -= instance.OnTime_VeryFastPlay;
            @Time_VeryFastPlay.performed -= instance.OnTime_VeryFastPlay;
            @Time_VeryFastPlay.canceled -= instance.OnTime_VeryFastPlay;
        }

        public void RemoveCallbacks(ITimeActions instance)
        {
            if (m_Wrapper.m_TimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITimeActions instance)
        {
            foreach (var item in m_Wrapper.m_TimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TimeActions @Time => new TimeActions(this);
    public interface ITimeActions
    {
        void OnTime_Pause(InputAction.CallbackContext context);
        void OnTime_Play(InputAction.CallbackContext context);
        void OnTime_FastPlay(InputAction.CallbackContext context);
        void OnTime_VeryFastPlay(InputAction.CallbackContext context);
    }
}
